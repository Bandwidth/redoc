// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#loadAndBundleSpec should load And Bundle Spec demo/openapi.yaml 1`] = `
{
  "components": {
    "examples": {
      "Order": {
        "value": {
          "complete": false,
          "quantity": 1,
          "shipDate": "2018-10-19T16:46:45Z",
          "status": "placed",
        },
      },
    },
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "description": "My Pet",
                  "title": "Pettie",
                },
                {
                  "$ref": "#/components/schemas/Pet",
                },
              ],
            },
          },
          "application/xml": Object {
            "schema": Object {
              "properties": Object {
                "name": Object {
                  "default": Array [],
                  "description": "hooray",
                  "type": "string",
                },
              },
              "type": "object",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Cat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "huntingSkill": {
                "default": "lazy",
                "description": "The measured skill for hunting",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive",
                ],
                "example": "adventurous",
                "type": "string",
              },
            },
            "required": [
              "huntingSkill",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a cat",
        "x-tags": Array [
          "pet",
        ],
      },
      "Category": {
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Category ID",
          },
          "name": {
            "description": "Category name",
            "minLength": 1,
            "type": "string",
          },
          "sub": {
            "description": "Test Sub Category",
            "properties": {
              "prop1": {
                "description": "Dumb Property",
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "packSize": {
                "default": 1,
                "description": "The size of the pack the dog is from",
                "format": "int32",
                "minimum": 1,
                "type": "integer",
              },
            },
            "required": [
              "packSize",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a dog",
      },
      "HoneyBee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "honeyPerDay": {
                "description": "Average amount of honey produced per day in ounces",
                "example": 3.14,
                "multipleOf": 0.01,
                "type": "number",
              },
            },
            "required": [
              "honeyPerDay",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a honey bee",
      },
      "Id": {
        "format": "int64",
        "readOnly": true,
        "type": "integer",
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "description": "Indicates whenever order was completed or not",
            "readOnly": true,
            "type": "boolean",
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Order ID",
          },
          "petId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Pet ID",
          },
          "quantity": {
            "default": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer",
          },
          "requestId": {
            "description": "Unique Request Id",
            "type": "string",
            "writeOnly": true,
          },
          "shipDate": {
            "description": "Estimated ship date",
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "discriminator": {
          "mapping": {
            "bee": "#/components/schemas/HoneyBee",
            "cat": "#/components/schemas/Cat",
            "dog": "#/components/schemas/Dog",
          },
          "propertyName": "petType",
        },
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category",
              },
            ],
            "description": "Categories this pet belongs to",
          },
          "friend": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pet",
              },
            ],
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Pet ID",
            "externalDocs": {
              "description": "Find more info here",
              "url": "https://example.com",
            },
          },
          "name": {
            "description": "The name given to a pet",
            "example": "Guru",
            "type": "string",
          },
          "petType": {
            "description": "Type of a pet",
            "type": "string",
          },
          "photoUrls": Object {
            "default": Array [],
            "description": "The list of URL to a cute photos featuring pet",
            "items": {
              "format": "url",
              "type": "string",
            },
            "maxItems": 20,
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "Pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "description": "Tags attached to the pet",
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "minItems": 1,
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Tag ID",
          },
          "name": {
            "description": "Tag name",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "addresses": {
            "additionalItems": {
              "type": "string",
            },
            "items": [
              {
                "properties": {
                  "city": {
                    "minLength": 0,
                    "type": "string",
                  },
                  "country": {
                    "minLength": 0,
                    "type": "string",
                  },
                  "street": {
                    "description": "includes build/apartment number",
                    "minLength": 0,
                    "type": "string",
                  },
                },
                "type": "object",
              },
              {
                "type": "number",
              },
            ],
            "maxLength": 10,
            "minItems": 0,
            "type": "array",
          },
          "email": {
            "description": "User email address",
            "example": "john.smith@example.com",
            "format": "email",
            "type": "string",
          },
          "firstName": {
            "description": "User first name",
            "example": "John",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "$ref": "#/components/schemas/Id",
          },
          "lastName": {
            "description": "User last name",
            "example": "Smith",
            "minLength": 1,
            "type": "string",
          },
          "password": {
            "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
            "example": "drowssaP123",
            "format": "password",
            "minLength": 8,
            "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
            "type": "string",
          },
          "pet": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Pet",
              },
              {
                "$ref": "#/components/schemas/Tag",
              },
            ],
          },
          "phone": {
            "description": "User phone number in international format",
            "example": "+1-202-555-0192",
            "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
            "type": "string",
          },
          "userStatus": {
            "description": "User status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "description": "User supplied username",
            "example": "John78",
            "minLength": 4,
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "description": "For this sample, you can use the api key \`special-key\` to test the authorization filters.
",
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "description": "Get access to data while protecting your account credentials.
OAuth2 is also a safer and more secure way to give you access.
",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "name": "API Support",
      "url": "https://github.com/Redocly/redoc",
    },
    "description": "This is a sample server Petstore server.
You can find out more about Swagger at
[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
For this sample, you can use the api key \`special-key\` to test the authorization filters.

# Introduction
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).

# OpenAPI Specification
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).

# Cross-Origin Resource Sharing
This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
And that allows cross-domain communication from the browser.
All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.

# Authentication

Petstore offers two forms of authentication:
  - API Key
  - OAuth2
OAuth2 - an open protocol to allow secure authorization in a simple
and standard method from web, mobile and desktop applications.

<!-- ReDoc-Inject: <security-definitions> -->
",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.1.0",
    "x-logo": Object {
      "altText": "Petstore logo",
      "url": "https://redocly.github.io/redoc/petstore-logo.png",
    },
  },
  "openapi": "3.0.0",
  "paths": Object {
    "/accounts/{accountId}/tnoptions": Object {
      "get": Object {
        "description": "Retrieve a list of the TN Option orders that are associated with the account. A maximum of 1,000 orders can be retrieved per request. If no date range or specific query parameter (marked by <b>*</b> below) is provided, the order results will be limited to the last two years.",
        "operationId": "GetTnOptionOrders",
        "parameters": Array [
          Object {
            "description": "The status of the TN Option order being searched for.",
            "example": "PROCESSING",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          Object {
            "description": "<b>*</b> A Telephone Number (TN) that is referenced in the order.",
            "example": "9199918388",
            "in": "query",
            "name": "tn",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "<b>*</b> The Customer Order ID is an ID assigned by the account owner to provide a reference number for the TN Option order.",
            "example": "ABCCorp12345",
            "in": "query",
            "name": "customerOrderId",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "For Date-based searches, the starting date of a date range (inclusive) that will be used to find TN Option Orders that were modified within the date range. It is in the form yyyy-MM-dd.",
            "example": "2013-10-22",
            "in": "query",
            "name": "modifiedDateFrom",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "For Date-based searches, the ending date of a date range (inclusive) that will be used to find TN Option Orders that were modified within the date range.  It is in the form yyyy-MM-dd.",
            "example": "2013-10-25",
            "in": "query",
            "name": "modifiedDateTo",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "Checks the order's creation date against this value. Orders that have a creation date after this date will be included. Format is yyyy-MM-dd.",
            "example": "2013-10-22",
            "in": "query",
            "name": "createdDateFrom",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "Checks the order's creation date against this value. Orders that have a creation date before this date will be included. Format is yyyy-MM-dd.",
            "example": "2013-10-25",
            "in": "query",
            "name": "createdDateTo",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "Checks the order's last modified date against this value. Orders that have a modification date after this date will be included. Format is yyyy-MM-dd.",
            "example": "2013-10-25",
            "in": "query",
            "name": "lastModifiedAfter",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "This is the user-name of the user that last modified the TN Option Order.",
            "example": "smckinnon",
            "in": "query",
            "name": "lastModifiedBy",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "<b>*</b> This search parameter represents the internal Bandwidth Dashboard API ID that has been assigned to the TN Option Order. This parameter is the first few characters of the internal ID - the entire ID does not need to be specified.",
            "example": "ed1c0bed-e2",
            "in": "query",
            "name": "orderIdFragment",
            "required": false,
            "schema": Object {
              "type": "string",
            },
          },
          Object {
            "description": "If set to true, a list of order details will be displayed instead the summary information.",
            "in": "query",
            "name": "orderDetails",
            "required": false,
            "schema": Object {
              "type": "boolean",
            },
          },
        ],
        "responses": Object {
          "200": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrderReportResponse>
   <TnOptionOrders>
      <TotalCount>2</TotalCount>
      <TnOptionOrderSummary>
         <accountId>14</accountId>
         <CountOfTNs>2</CountOfTNs>
         <userId>jbm</userId>
         <lastModifiedDate>2016-01-15T12:01:14.363Z</lastModifiedDate>
         <OrderDate>2016-01-15T12:01:14.324Z</OrderDate>
         <OrderType>tn_option</OrderType>
         <OrderStatus>FAILED</OrderStatus>
         <OrderId>ddbdc72e-dc27-490c-904e-d0c11291b095</OrderId>
      </TnOptionOrderSummary>
      <TnOptionOrderSummary>
         <accountId>14</accountId>
         <CountOfTNs>3</CountOfTNs>
         <userId>jbm</userId>
         <lastModifiedDate>2016-01-15T11:22:58.969Z</lastModifiedDate>
         <OrderDate>2016-01-15T11:22:58.789Z</OrderDate>
         <OrderType>tn_option</OrderType>
         <OrderStatus>COMPLETE</OrderStatus>
         <OrderId>409033ee-88ec-43e3-85f3-538f30733963</OrderId>
      </TnOptionOrderSummary>
   </TnOptionOrders>
   <!-- OR -->
   <TnOptionOrders>
      <TotalCount>2</TotalCount>
      <TnOptionOrder>
         <OrderCreateDate>2016-01-15T12:01:14.324Z</OrderCreateDate>
         <AccountId>14</AccountId>
         <CreatedByUser>jbm</CreatedByUser>
         <OrderId>ddbdc72e-dc27-490c-904e-d0c11291b095</OrderId>
         <LastModifiedDate>2016-01-15T12:01:14.363Z</LastModifiedDate>
         <ProcessingStatus>FAILED</ProcessingStatus>
         <TnOptionGroups>
            <TnOptionGroup>
               <NumberFormat>10digit</NumberFormat>
               <RPIDFormat>10digit</RPIDFormat>
               <RewriteUser>testUser1</RewriteUser>
               <CallForward>6042661720</CallForward>
               <CallingNameDisplay>on</CallingNameDisplay>
               <Protected>true</Protected>
               <Sms>on</Sms>
               <FinalDestinationURI>sip:+12345678901@1.2.3.4:5060</FinalDestinationURI>
               <TelephoneNumbers>
                  <TelephoneNumber>2018551020</TelephoneNumber>
               </TelephoneNumbers>
            </TnOptionGroup>
            <TnOptionGroup>
               <CallingNameDisplay>off</CallingNameDisplay>
               <Protected>false</Protected>
               <Sms>off</Sms>
               <TelephoneNumbers>
                  <TelephoneNumber>2018551025</TelephoneNumber>
               </TelephoneNumbers>
            </TnOptionGroup>
         </TnOptionGroups>
         <ErrorList>
            <Error>
               <Code>5076</Code>
               <Description>Telephone number is not available.</Description>
               <TelephoneNumber>2018551025</TelephoneNumber>
            </Error>
            <Error>
               <Code>5076</Code>
               <Description>Telephone number is not available.</Description>
               <TelephoneNumber>2018551020</TelephoneNumber>
            </Error>
         </ErrorList>
      </TnOptionOrder>
      <TnOptionOrder>
         <OrderCreateDate>2016-01-15T11:22:58.789Z</OrderCreateDate>
         <AccountId>14</AccountId>
         <CreatedByUser>jbm</CreatedByUser>
         <OrderId>409033ee-88ec-43e3-85f3-538f30733963</OrderId>
         <LastModifiedDate>2016-01-15T11:22:58.969Z</LastModifiedDate>
         <ProcessingStatus>COMPLETE</ProcessingStatus>
         <TnOptionGroups>
            <TnOptionGroup>
               <CallingNameDisplay>on</CallingNameDisplay>
               <TelephoneNumbers>
                  <TelephoneNumber>2174101601</TelephoneNumber>
               </TelephoneNumbers>
            </TnOptionGroup>
            <TnOptionGroup>
               <CallingNameDisplay>off</CallingNameDisplay>
               <TelephoneNumbers>
                  <TelephoneNumber>2174101602</TelephoneNumber>
               </TelephoneNumbers>
            </TnOptionGroup>
            <TnOptionGroup>
               <CallingNameDisplay>systemdefault</CallingNameDisplay>
               <TelephoneNumbers>
                  <TelephoneNumber>2174101603</TelephoneNumber>
               </TelephoneNumbers>
            </TnOptionGroup>
         </TnOptionGroups>
         <ErrorList/>
      </TnOptionOrder>
   </TnOptionOrders>
</TnOptionOrderReportResponse>",
                  },
                },
              },
            },
            "description": "The descriptive payload for the TN Option Orders query provides a broad range of information about the TN Option Orders found by the query, including the data associated with the order, the state of the order, and details about the order if it was successful.",
          },
          "404": Object {
            "content": Object {
              "application/xml": Object {},
            },
            "description": "Not Found.  If any errors are found in the processing of the query string a 404 will be returned.  Note that parameters that are not recognized are not considered errors, and are just ignored.
",
          },
        },
        "summary": "Retrieve list TN Option orders",
        "tags": Array [
          "Tn Option",
        ],
        "x-badges": Array [
          Object {
            "name": "1st Badge",
            "type": "warning",
          },
          Object {
            "name": "2nd Badge",
            "type": "experimental",
          },
        ],
      },
      "post": Object {
        "description": "Create TN Option order to assign line features to the telephone number.<br><br>Attribute description:<ul><li>for A2pSettings attribute</li><table style=\\"text-align: left; width: 80%;\\" border=\\"1\\" cellpadding=\\"2\\" cellspacing=\\"0\\"><tbody><tr><th>Number attribute</th><th>Action value</th><th>Description of action</th></tr><tr><td>LongCode</td><td><i>systemDefault</i></td><td>Removes the per-TN A2P attributes, and it reverts to the Location/SIP Peer characteristics. Any values for Class or Campaign ID are not valid</td></tr><tr><td>LongCode</td><td><i>asSpecified</i></td><td>Sets the message class and campaign ID - this is the default if unspecified</td></tr><tr><td>LongCode</td><td><i>off</i></td><td>Will set the TN as a 'P' TN. Any values for Class or Campaign ID are not valid</td></tr><tr><td>LongCode</td><td><i>delete</i></td><td>Will delete the campaign ID from TN. Any values for Class or Campaign ID are not valid</td></tr><tr><td>LongCode</td><td><i>unchanged</i></td><td>Do nothing with respect to A2P</td></tr><tr><td>TollFree</td><td><i>systemDefault</i></td><td>Removes the per-TN A2P attributes, and it reverts to the Location/SIP Peer characteristics. Any values for Class or Campaign ID are not valid</td></tr><tr><td>TollFree</td><td><i>asSpecified</i></td><td>Sets the message class and campaign ID - this is the default if unspecified</td></tr><tr><td>TollFree</td><td><i>off</i></td><td>If the Togglz value is set to 'on' this is invalid for Toll Free telephone numbers. Any values for Class or Campaign ID in the payload are invalid. If the Togglz value is set to off this behaves like and A2P TN, where the characteristics of the TNs is set to 'P'</td></tr><tr><td>TollFree</td><td><i>unchanged</i></td><td>Do nothing with respect to A2P</td></tr></tbody></table><li>for Origination Route plan attribute</li><table style=\\"text-align: left; width: 80%;\\" border=\\"1\\" cellpadding=\\"2\\" cellspacing=\\"0\\"><tbody><tr><th>Action value</th><th>Description of action</th></tr><tr><td>asSpecified</td><td>Creates/updates the origination route plan for the TN with route plan details provided in the request </td></tr><tr><td>off</td><td>Removes the origination route plan for the TN. Route list is the request must be empty</td></tr><tr><td>unchanged</td><td>Doesn't update/create the origination route plan, even when route plan details exist in the request</td></tr></tbody></table><ul><li> Origination route plan is validated against CallForward and RewriteUser</li><ul><li type=\\"square\\">Route plan and CallForward cannot co-exist. Order is accepted but will respond with error messages on GET.</li><li type=\\"square\\">Route plan and RewriteUser cannot co-exist. Order is accepted but will respond with error messages on GET.</li></ul></ul><li>for Pindrop Enabled attribute</li><table style=\\"text-align: left; width: 80%;\\" border=\\"1\\" cellpadding=\\"2\\" cellspacing=\\"0\\"><tbody><tr><th>Action value</th><th>Description of action</th></tr><tr><td>true</td><td>Enables Pindrop integration on each phone number in the option group</td></tr><tr><td>false</td><td>Explicitly disables Pindrop integration on each phone number in the option group</td></tr></tbody></table><li>for other attribute</li><ul><li type=\\"square\\"> <i>systemDefault</i> - implies that the element profile value should be removed so that the TN changes back to the default system behavior;</li><li type=\\"square\\"> <i>unchanged</i> - the value should remain unchanged - implies a read before write model.</li><li type=\\"square\\"><u>Leaving the element out of the payload is equivalent to <i>unchanged</i>.</u></li></ul></ul>",
        "operationId": "CreateTnOptionOrder",
        "requestBody": Object {
          "content": Object {
            "application/xml": Object {
              "examples": Object {
                "example": Object {
                  "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrder>
  <CustomerOrderId>TnOptionOrder1</CustomerOrderId>
  <TnOptionGroups>
    <TnOptionGroup>
      <NumberFormat>10digit</NumberFormat>
      <RPIDFormat>10digit</RPIDFormat>
      <RewriteUser>testUser1</RewriteUser>
      <CallForward>6042661720</CallForward>
      <CallingNameDisplay>on</CallingNameDisplay>
      <PortOutPasscode>a1b2c3</PortOutPasscode>
      <Protected>true</Protected>
      <Sms>on</Sms>
      <FinalDestinationURI>sip:+12345678901@1.2.3.4:5060</FinalDestinationURI>
      <A2pSettings>
        <MessageClass>M</MessageClass>
        <CampaignId>campaignId010</CampaignId>
        <Action>asSpecified</Action>
      </A2pSettings>
      <TelephoneNumbers>
        <TelephoneNumber>2018551020</TelephoneNumber>
      </TelephoneNumbers>
    </TnOptionGroup>
    <TnOptionGroup>
      <CallingNameDisplay>off</CallingNameDisplay>
      <Protected>false</Protected>
      <Sms>off</Sms>
      <OriginationRoutePlan>
        <Route>
          <Endpoint>6105552502</Endpoint>
          <Priority>1</Priority>
          <Weight>100</Weight>
        </Route>
        <Route>
          <Endpoint>sip:clarkkent@dailyplanet.com</Endpoint>
          <Priority>2</Priority>
          <Weight>100</Weight>
        </Route>
        <Route>
          <Endpoint>192.168.20.21</Endpoint>
          <Priority>3</Priority>
          <Weight>50</Weight>
        </Route>
        <Route>
          <Endpoint>7075552509</Endpoint>
          <Priority>3</Priority>
          <Weight>50</Weight>
        </Route>
        <Route>
          <Endpoint>myhost.bandwidth.example</Endpoint>
          <Priority>4</Priority>
          <Weight>100</Weight>
        </Route>
        <Action>asSpecified</Action>
      </OriginationRoutePlan>
      <TelephoneNumbers>
        <TelephoneNumber>2018551025</TelephoneNumber>
      </TelephoneNumbers>
    </TnOptionGroup>
    <TnOptionGroup>
      <PindropEnabled>true</PindropEnabled>
      <TelephoneNumbers>
        <TelephoneNumber>2018551026</TelephoneNumber>
      </TelephoneNumbers>
    </TnOptionGroup>
  </TnOptionGroups>
</TnOptionOrder>",
                },
              },
            },
          },
        },
        "responses": Object {
          "201": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrderResponse>
  <TnOptionOrder>
    <OrderCreateDate>2016-01-15T12:01:14.324Z</OrderCreateDate>
    <AccountId>14</AccountId>
    <CreatedByUser>jbm</CreatedByUser>
    <OrderId>ddbdc72e-dc27-490c-904e-d0c11291b095</OrderId>
    <LastModifiedDate>2016-01-15T12:01:14.324Z</LastModifiedDate>
    <ProcessingStatus>RECEIVED</ProcessingStatus>
    <TnOptionGroups>
      <TnOptionGroup>
        <NumberFormat>10digit</NumberFormat>
        <RPIDFormat>10digit</RPIDFormat>
        <RewriteUser>testUser1</RewriteUser>
        <CallForward>6042661720</CallForward>
        <CallingNameDisplay>on</CallingNameDisplay>
        <Protected>true</Protected>
        <Sms>on</Sms>
        <TelephoneNumbers>
          <TelephoneNumber>2018551020</TelephoneNumber>
        </TelephoneNumbers>
      </TnOptionGroup>
      <TnOptionGroup>
        <CallingNameDisplay>off</CallingNameDisplay>
        <Protected>false</Protected>
        <Sms>off</Sms>
        <TelephoneNumbers>
          <TelephoneNumber>2018551025</TelephoneNumber>
        </TelephoneNumbers>
      </TnOptionGroup>
    </TnOptionGroups>
    <ErrorList/>
  </TnOptionOrder>
</TnOptionOrderResponse>",
                  },
                },
              },
            },
            "description": "Created",
          },
          "400": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrderResponse>
  <ResponseStatus>
    <ErrorCode>5081</ErrorCode>
    <Description>Number Format 'wrong' is invalid.</Description>
  </ResponseStatus>
</TnOptionOrderResponse>",
                  },
                },
              },
            },
            "description": "Bad Request A 400 response Indicates that the order could not be created. Error text and an error code will be provided in the ErrorList element.",
          },
          "409": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrderResponse>
  <ResponseStatus>
    <ErrorCode>5200</ErrorCode>
    <Description>Origination route plan is not enabled for the account.</Description>
  </ResponseStatus>
</TnOptionOrderResponse>",
                  },
                },
              },
            },
            "description": "Conflict. Error text and an error code will be provided in the ErrorList element.",
          },
        },
        "summary": "Create TN Option order",
        "tags": Array [
          "Tn Option",
        ],
      },
    },
    "/accounts/{accountId}/tnoptions/{orderid}": Object {
      "get": Object {
        "description": "Retrieve information about a TN Option Order with specified ID.",
        "operationId": "GetTnOptionOrder",
        "parameters": Array [
          Object {
            "description": "",
            "in": "path",
            "name": "orderid",
            "required": true,
            "schema": Object {
              "type": "string",
            },
          },
        ],
        "responses": Object {
          "200": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrder>
  <OrderCreateDate>2016-01-15T11:22:58.789Z</OrderCreateDate>
  <AccountId>14</AccountId>
  <CreatedByUser>jbm</CreatedByUser>
  <OrderId>409033ee-88ec-43e3-85f3-538f30733963</OrderId>
  <LastModifiedDate>2016-01-15T11:22:58.969Z</LastModifiedDate>
  <ProcessingStatus>COMPLETE</ProcessingStatus>
  <TnOptionGroups>
    <TnOptionGroup>
      <CallingNameDisplay>on</CallingNameDisplay>
      <Sms>on</Sms>
      <TelephoneNumbers>
        <TelephoneNumber>2174101601</TelephoneNumber>
      </TelephoneNumbers>
    </TnOptionGroup>
    <TnOptionGroup>
      <CallingNameDisplay>off</CallingNameDisplay>
      <TelephoneNumbers>
        <TelephoneNumber>2174101602</TelephoneNumber>
      </TelephoneNumbers>
      </TnOptionGroup>
    <TnOptionGroup>
      <CallingNameDisplay>systemdefault</CallingNameDisplay>
      <FinalDestinationURI>sip:+12345678901@1.2.3.4:5060</FinalDestinationURI>
      <TelephoneNumbers>
        <TelephoneNumber>2174101603</TelephoneNumber>
      </TelephoneNumbers>
    </TnOptionGroup>
  </TnOptionGroups>
  <ErrorList/>
  <Warnings>
    <Warning>
      <TelephoneNumber>2174101601</TelephoneNumber>
      <Description>SMS is already Enabled or number is in processing.</Description>
    </Warning>
  </Warnings>
</TnOptionOrder>",
                  },
                },
              },
            },
            "description": "The descriptive payload for the TN Option Orders query provides a broad range of information about the TN Option Order identified in the URL.  Included amongst the information is: <ul><li>ErrorList - the errors discovered with codes and explanations</li><li>Warnings - the warnings discovered with explanations</li><li>ProcessingStatus(RECEIVED, PROCESSING, COMPLETE, PARTIAL, FAILED) - the overall status of the order</li></ul>",
          },
          "404": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "example": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<TnOptionOrderReportResponse>
  <ResponseStatus>
    <Description>The resource does not exist</Description>
  </ResponseStatus>
</TnOptionOrderReportResponse>",
                  },
                },
              },
            },
            "description": "Not found. The order id does not exist in the system.",
          },
        },
        "summary": "Retrieve TN Option order",
        "tags": Array [
          "Tn Option",
        ],
      },
    },
    "/accounts/{accountId}/tnoptions/{orderid}/history": Object {
      "get": Object {
        "description": "Retrieve the history information associated with an order.",
        "operationId": "GetOrderHistory",
        "parameters": Array [
          Object {
            "description": "",
            "in": "path",
            "name": "orderid",
            "required": true,
            "schema": Object {
              "type": "string",
            },
          },
        ],
        "responses": Object {
          "200": Object {
            "content": Object {
              "application/xml": Object {
                "examples": Object {
                  "application/xml": Object {
                    "value": "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" standalone=\\"yes\\"?>
<OrderHistoryWrapper>
   <OrderHistory>
      <OrderDate>2020-09-17T08:56:39.607Z</OrderDate>
      <Note>Order has been received by the system.</Note>
      <Author>admin</Author>
      <Status>received</Status>
   </OrderHistory>
   <OrderHistory>
      <OrderDate>2020-09-17T08:56:39.743Z</OrderDate>
      <Note>Order processing has started.</Note>
      <Author>admin</Author>
      <Status>processing</Status>
   </OrderHistory>
   <OrderHistory>
      <OrderDate>2020-09-17T08:56:39.820Z</OrderDate>
      <Note>Order is complete.</Note>
      <Author>admin</Author>
      <Status>complete</Status>
   </OrderHistory>
</OrderHistoryWrapper>",
                  },
                },
              },
            },
            "description": "The history payload is a set of history records, each of which contains: <table style=\\"text-align: left; width: 80%;\\" border=\\"1\\" cellpadding=\\"2\\" cellspacing=\\"2\\">
        <tbody>
            <tr>
                <td>OrderDate</td>
                <td>The date that the order history event happened</td></tr><tr><td>Status</td><td>The new state of the TN Option order - RECEIVED, PROCESSING, COMPLETE, PARTIAL, FAILED</td></tr><tr><td>Note</td><td>A Note or additional information included with the state change</td></tr><tr><td>Author</td><td>The user id that implemented the state change</td></tr></tbody></table></p>",
          },
          "404": Object {
            "content": Object {
              "application/xml": Object {},
            },
            "description": "Not found. The order id does not exist in the system.",
          },
        },
        "summary": "Retrieve TN Option order history",
        "tags": Array [
          "Tn Option",
        ],
        "x-badges": Array [
          Object {
            "name": "Success",
            "type": "success",
          },
        ],
      },
    },
    "/pet": Object {
      "parameters": Array [
        Object {
          "description": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
          "example": "en-US",
          "in": "header",
          "name": "Accept-Language",
          "required": false,
          "schema": {
            "default": "en-AU",
            "type": "string",
          },
        },
        {
          "description": "Some cookie",
          "in": "cookie",
          "name": "cookieParam",
          "required": true,
          "schema": {
            "format": "int64",
            "type": "integer",
          },
        },
      ],
      "post": {
        "description": "Add new pet to the store inventory.",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
        "x-badges": Array [
          Object {
            "name": "Global",
            "type": "global",
          },
        ],
        "x-codeSamples": Array [
          Object {
            "lang": "C#",
            "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();
pet.setApiKey("your api key");
pet.petType = PetStore.v1.Pet.TYPE_DOG;
pet.name = "Rex";
// set other fields
PetStoreResponse response = pet.create();
if (response.statusCode == HttpStatusCode.Created)
{
  // Successfully created
}
else
{
  // Something wrong -- check response for errors
  Console.WriteLine(response.getRawResponse());
}
",
          },
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->create($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
        "x-badges": Array [
          Object {
            "name": "US Only",
            "type": "usonly",
          },
        ],
        "x-codeSamples": Array [
          Object {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetId(1);
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->update($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "maxItems": 3,
              "minItems": 1,
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                    "maxItems": 111,
                  },
                  "maxItems": 999,
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "example": "Bearer <TOKEN>",
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "deprecated": true,
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
        "x-badges": [
          {
            "name": "Gamma",
          },
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "minProperties": 2,
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid Order",
                  "status": 400,
                },
              },
            },
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 5,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/store/subscribe": {
      "post": {
        "callbacks": {
          "orderDelivered": {
            "http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}": {
              "post": {
                "deprecated": true,
                "description": "A callback triggered every time an Order is delivered to the recipient",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
                "summary": "Order delivered",
              },
            },
          },
          "orderInProgress": {
            "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
              "post": {
                "description": "A callback triggered every time an Order is updated status to "inProgress" (Description)",
                "externalDocs": {
                  "description": "Find out more",
                  "url": "https://more-details.com/demo",
                },
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "status": {
                            "example": "inProgress",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "application/xml": {
                      "example": "<?xml version="1.0" encoding="UTF-8"?>
<root>
  <orderId>123</orderId>
  <status>inProgress</status>
  <timestamp>2018-10-19T16:46:45Z</timestamp>
</root>
",
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "someProp": {
                              "example": "123",
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                    },
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                  "299": {
                    "description": "Response for cancelling subscription",
                  },
                  "500": {
                    "description": "Callback processing failed and retries will be performed",
                  },
                },
                "summary": "Order in Progress (Summary)",
                "x-codeSamples": [
                  {
                    "lang": "C#",
                    "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();
pet.setApiKey("your api key");
pet.petType = PetStore.v1.Pet.TYPE_DOG;
pet.name = "Rex";
// set other fields
PetStoreResponse response = pet.create();
if (response.statusCode == HttpStatusCode.Created)
{
  // Successfully created
}
else
{
  // Something wrong -- check response for errors
  Console.WriteLine(response.getRawResponse());
}
",
                  },
                  {
                    "lang": "PHP",
                    "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->create($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
                  },
                ],
              },
              "put": {
                "description": "Order in Progress (Only Description)",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "status": {
                            "example": "inProgress",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "application/xml": {
                      "example": "<?xml version="1.0" encoding="UTF-8"?>
<root>
  <orderId>123</orderId>
  <status>inProgress</status>
  <timestamp>2018-10-19T16:46:45Z</timestamp>
</root>
",
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "someProp": {
                              "example": "123",
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                    },
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
                "servers": [
                  {
                    "description": "Operation level server 1 (Operation override)",
                    "url": "//callback-url.operation-level/v1",
                  },
                  {
                    "description": "Operation level server 2 (Operation override)",
                    "url": "//callback-url.operation-level/v2",
                  },
                ],
              },
              "servers": [
                {
                  "description": "Path level server 1",
                  "url": "//callback-url.path-level/v1",
                },
                {
                  "description": "Path level server 2",
                  "url": "//callback-url.path-level/v2",
                },
              ],
            },
          },
          "orderShipped": {
            "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
              "post": {
                "description": "Very long description
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "estimatedDeliveryDate": {
                            "example": "2018-11-11T16:00:00Z",
                            "format": "date-time",
                            "type": "string",
                          },
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
              },
            },
          },
        },
        "description": "Add subscription for a store events",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "callbackUrl": {
                    "description": "This URL will be called by the server when the desired event will occur",
                    "example": "https://myserver.com/send/callback/here",
                    "format": "uri",
                    "type": "string",
                  },
                  "eventName": {
                    "description": "Event name for the subscription",
                    "enum": [
                      "orderInProgress",
                      "orderShipped",
                      "orderDelivered",
                    ],
                    "example": "orderInProgress",
                    "type": "string",
                  },
                },
                "required": [
                  "callbackUrl",
                  "eventName",
                ],
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subscriptionId": {
                      "example": "AAA-123-BBB-456",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Subscription added",
          },
        },
        "summary": "Subscribe to the Store events",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "examples": {
                  "response": {
                    "value": "<Message> OK </Message>",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "security": [
    {},
  ],
  "servers": [
    {
      "description": "Default server",
      "url": "//petstore.swagger.io/v2",
    },
    {
      "description": "Sandbox server",
      "url": "//petstore.swagger.io/sandbox",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "name": "pet",
    },
    Object {
      "description": "Everything about your TN Options",
      "name": "Tn Option",
    },
    Object {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "name": "user",
    },
    {
      "description": "<SchemaDefinition schemaRef="#/components/schemas/Pet" />
",
      "name": "pet_model",
      "x-displayName": "The Pet Model",
    },
    {
      "description": "<SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
",
      "name": "store_model",
      "x-displayName": "The Order Model",
    },
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "pet",
        "store",
        "Tn Option",
      ],
    },
    {
      "name": "User Management",
      "tags": [
        "user",
      ],
    },
    {
      "name": "Models",
      "tags": [
        "pet_model",
        "store_model",
      ],
    },
  ],
  "x-webhooks": {
    "newPet": {
      "post": {
        "description": "Information about a new pet in the systems",
        "operationId": "newPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully",
          },
        },
        "summary": "New pet",
        "tags": [
          "pet",
        ],
      },
    },
  },
}
`;

exports[`#loadAndBundleSpec should load And Bundle Spec demo/openapi-3-1.yaml 1`] = `
{
  "components": {
    "examples": {
      "Order": {
        "value": {
          "complete": false,
          "quantity": 1,
          "shipDate": "2018-10-19T16:46:45Z",
          "status": "placed",
        },
      },
    },
    "pathItems": {
      "webhooks": {
        "post": {
          "description": "Info about new cat",
          "operationId": "createdCat",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "Information about cat in the system",
          },
          "responses": {
            "200": {
              "description": "create Cat details",
            },
          },
          "summary": "Create new cat",
          "tags": [
            "webhooks",
          ],
        },
        "put": {
          "description": "Get a cat details after update",
          "operationId": "updatedCat",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Cat",
                },
              },
            },
            "description": "Information about cat in the system",
          },
          "responses": {
            "200": {
              "description": "update Cat details",
            },
          },
          "summary": "Get a cat details after update",
          "tags": [
            "webhooks",
          ],
        },
      },
    },
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
              "description": "My Pet",
              "title": "Pettie",
            },
          },
          "application/xml": {
            "schema": {
              "properties": {
                "name": {
                  "description": "hooray",
                  "type": "string",
                },
              },
              "type": "object",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "patternProperties": {
          "^O_\\\\w+\\\\.[1-9]{2,4}$": {
            "properties": {
              "nestedProperty": {
                "default": "lazy",
                "description": "The measured skill for hunting",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive",
                ],
                "example": "adventurous",
                "type": [
                  "string",
                  "boolean",
                ],
              },
            },
            "type": "object",
          },
          "^S_\\\\w+\\\\.[1-9]{2,4}$": {
            "description": "The measured skill for hunting",
            "else": {
              "maxLength": 10,
              "minLength": 1,
            },
            "if": {
              "x-displayName": "fieldName === 'status'",
            },
            "then": {
              "enum": [
                "success",
                "failed",
              ],
              "format": "url",
              "type": "string",
            },
          },
        },
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Cat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "huntingSkill": {
                "default": "lazy",
                "description": "The measured skill for hunting",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive",
                ],
                "example": "adventurous",
                "type": [
                  "string",
                  "boolean",
                ],
              },
            },
            "required": [
              "huntingSkill",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a cat",
      },
      "Category": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Category ID",
          },
          "name": {
            "description": "Category name",
            "minLength": 1,
            "type": "string",
          },
          "sub": {
            "description": "Test Sub Category",
            "properties": {
              "prop1": {
                "description": "Dumb Property",
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "packSize": {
                "default": 1,
                "description": "The size of the pack the dog is from",
                "format": "int32",
                "minimum": 1,
                "type": "integer",
              },
            },
            "required": [
              "packSize",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a dog",
      },
      "HoneyBee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "honeyPerDay": {
                "description": "Average amount of honey produced per day in ounces",
                "example": 3.14,
                "multipleOf": 0.01,
                "type": "number",
              },
            },
            "required": [
              "honeyPerDay",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a honey bee",
      },
      "Id": {
        "format": "int64",
        "readOnly": true,
        "type": "integer",
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "description": "Indicates whenever order was completed or not",
            "readOnly": true,
            "type": "boolean",
          },
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Order ID",
          },
          "petId": {
            "$ref": "#/components/schemas/Id",
            "description": "Pet ID",
          },
          "quantity": {
            "default": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer",
          },
          "requestId": {
            "description": "Unique Request Id",
            "type": "string",
            "writeOnly": true,
          },
          "shipDate": {
            "description": "Estimated ship date",
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "discriminator": {
          "mapping": {
            "bee": "#/components/schemas/HoneyBee",
            "cat": "#/components/schemas/Cat",
            "dog": "#/components/schemas/Dog",
          },
          "propertyName": "petType",
        },
        "properties": {
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "Categories this pet belongs to",
          },
          "friend": {
            "$ref": "#/components/schemas/Pet",
          },
          "huntingSkill": {
            "enum": [
              0,
              1,
              2,
            ],
            "type": [
              "integer",
            ],
          },
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Pet ID",
            "externalDocs": {
              "description": "Find more info here",
              "url": "https://example.com",
            },
          },
          "name": {
            "description": "The name given to a pet",
            "example": "Guru",
            "type": "string",
          },
          "petType": {
            "description": "Type of a pet",
            "type": "string",
          },
          "photoUrls": Object {
            "default": Array [],
            "description": "The list of URL to a cute photos featuring pet",
            "else": {
              "maxItems": 20,
              "minItems": 1,
              "type": [
                "integer",
                "null",
              ],
              "x-displayName": "notString",
            },
            "if": {
              "type": "string",
              "x-displayName": "isString",
            },
            "items": {
              "format": "url",
              "type": "string",
            },
            "maxItems": 10,
            "minItems": 1,
            "then": {
              "maxItems": 15,
              "minItems": 1,
            },
            "type": [
              "string",
              "integer",
              "null",
            ],
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "default": "pending",
            "description": "Pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "description": "Tags attached to the pet",
            "exclusiveMaximum": 100,
            "exclusiveMinimum": 0,
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Tag ID",
            "type": "number",
          },
          "name": {
            "description": "Tag name",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "else": {
          "required": [],
        },
        "if": {
          "properties": {
            "userStatus": {
              "enum": [
                10,
              ],
            },
          },
          "title": "userStatus === 10",
        },
        "properties": {
          "addresses": {
            "items": {
              "type": "string",
            },
            "maxLength": 10,
            "minItems": 0,
            "prefixItems": [
              {
                "properties": {
                  "city": {
                    "minLength": 0,
                    "type": "string",
                  },
                  "country": {
                    "minLength": 0,
                    "type": "string",
                  },
                  "street": {
                    "description": "includes build/apartment number",
                    "minLength": 0,
                    "type": "string",
                  },
                },
                "type": "object",
              },
              {
                "type": "number",
              },
            ],
            "type": "array",
          },
          "email": {
            "description": "User email address",
            "example": "john.smith@example.com",
            "format": "email",
            "type": "string",
          },
          "firstName": {
            "description": "User first name",
            "example": "John",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "$ref": "#/components/schemas/Id",
          },
          "image": {
            "contentEncoding": "base64",
            "contentMediaType": "image/png",
            "description": "User image",
            "type": "string",
          },
          "lastName": {
            "description": "User last name",
            "example": "Smith",
            "minLength": 1,
            "type": "string",
          },
          "password": {
            "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
            "example": "drowssaP123",
            "format": "password",
            "minLength": 8,
            "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
            "type": "string",
          },
          "pet": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Pet",
                "title": "Pettie",
              },
              {
                "$ref": "#/components/schemas/Tag",
              },
            ],
          },
          "phone": {
            "description": "User phone number in international format",
            "example": "+1-202-555-0192",
            "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
            "type": "string",
          },
          "userStatus": {
            "description": "User status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "description": "User supplied username",
            "example": "John78",
            "minLength": 4,
            "type": "string",
          },
        },
        "then": {
          "required": [
            "phone",
          ],
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "description": "For this sample, you can use the api key \`special-key\` to test the authorization filters.
",
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "description": "Get access to data while protecting your account credentials.
OAuth2 is also a safer and more secure way to give you access.
",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "name": "API Support",
      "url": "https://github.com/Redocly/redoc",
    },
    "description": "This is a sample server Petstore server.
You can find out more about Swagger at
[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
For this sample, you can use the api key \`special-key\` to test the authorization filters.

# Introduction
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).

# OpenAPI Specification
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).

# Cross-Origin Resource Sharing
This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
And that allows cross-domain communication from the browser.
All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.

# Authentication

Petstore offers two forms of authentication:
  - API Key
  - OAuth2
OAuth2 - an open protocol to allow secure authorization in a simple
and standard method from web, mobile and desktop applications.

<SecurityDefinitions />
",
    "license": {
      "identifier": "Apache 2.0",
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "summary": "My lovely API",
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
    "x-logo": {
      "altText": "Petstore logo",
      "url": "https://redocly.github.io/redoc/petstore-logo.png",
    },
  },
  "openapi": "3.1.0",
  "paths": {
    "/pet": {
      "delete": {
        "operationId": "deletePetBy"Id",
        "summary": "OperationId with quotes",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "operationId": "delete\\PetById",
        "summary": "OperationId with backslash",
        "tags": [
          "pet",
        ],
      },
      "parameters": [
        {
          "description": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
          "example": "en-US",
          "in": "header",
          "name": "Accept-Language",
          "required": false,
          "schema": {
            "default": "en-AU",
            "type": "string",
          },
        },
        {
          "description": "Some cookie",
          "in": "cookie",
          "name": "cookieParam",
          "required": true,
          "schema": {
            "format": "int64",
            "type": "integer",
          },
        },
      ],
      "post": {
        "description": "Add new pet to the store inventory.",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
        "x-codeSamples": [
          {
            "lang": "C#",
            "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();
pet.setApiKey("your api key");
pet.petType = PetStore.v1.Pet.TYPE_DOG;
pet.name = "Rex";
// set other fields
PetStoreResponse response = pet.create();
if (response.statusCode == HttpStatusCode.Created)
{
  // Successfully created
}
else
{
  // Something wrong -- check response for errors
  Console.WriteLine(response.getRawResponse());
}
",
          },
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->create($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetId(1);
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->update($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "maxItems": 3,
              "minItems": 1,
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "example": "Bearer <TOKEN>",
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "deprecated": true,
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                  "unevaluatedProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid Order",
                  "status": 400,
                },
              },
            },
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 5,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/store/subscribe": {
      "post": {
        "callbacks": {
          "orderDelivered": {
            "http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}": {
              "post": {
                "deprecated": true,
                "description": "A callback triggered every time an Order is delivered to the recipient",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
                "summary": "Order delivered",
              },
            },
          },
          "orderInProgress": {
            "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
              "post": {
                "description": "A callback triggered every time an Order is updated status to "inProgress" (Description)",
                "externalDocs": {
                  "description": "Find out more",
                  "url": "https://more-details.com/demo",
                },
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "status": {
                            "example": "inProgress",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "application/xml": {
                      "example": "<?xml version="1.0" encoding="UTF-8"?>
<root>
  <orderId>123</orderId>
  <status>inProgress</status>
  <timestamp>2018-10-19T16:46:45Z</timestamp>
</root>
",
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "someProp": {
                              "example": "123",
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                    },
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                  "299": {
                    "description": "Response for cancelling subscription",
                  },
                  "500": {
                    "description": "Callback processing failed and retries will be performed",
                  },
                },
                "summary": "Order in Progress (Summary)",
                "x-codeSamples": [
                  {
                    "lang": "C#",
                    "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();
pet.setApiKey("your api key");
pet.petType = PetStore.v1.Pet.TYPE_DOG;
pet.name = "Rex";
// set other fields
PetStoreResponse response = pet.create();
if (response.statusCode == HttpStatusCode.Created)
{
  // Successfully created
}
else
{
  // Something wrong -- check response for errors
  Console.WriteLine(response.getRawResponse());
}
",
                  },
                  {
                    "lang": "PHP",
                    "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->create($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
                  },
                ],
              },
              "put": {
                "description": "Order in Progress (Only Description)",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "status": {
                            "example": "inProgress",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                    "application/xml": {
                      "example": "<?xml version="1.0" encoding="UTF-8"?>
<root>
  <orderId>123</orderId>
  <status>inProgress</status>
  <timestamp>2018-10-19T16:46:45Z</timestamp>
</root>
",
                      "schema": {
                        "properties": {
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "properties": {
                            "someProp": {
                              "example": "123",
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      },
                    },
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
                "servers": [
                  {
                    "description": "Operation level server 1 (Operation override)",
                    "url": "//callback-url.operation-level/v1",
                  },
                  {
                    "description": "Operation level server 2 (Operation override)",
                    "url": "//callback-url.operation-level/v2",
                  },
                ],
              },
              "servers": [
                {
                  "description": "Path level server 1",
                  "url": "//callback-url.path-level/v1",
                },
                {
                  "description": "Path level server 2",
                  "url": "//callback-url.path-level/v2",
                },
              ],
            },
          },
          "orderShipped": {
            "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
              "post": {
                "description": "Very long description
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "estimatedDeliveryDate": {
                            "example": "2018-11-11T16:00:00Z",
                            "format": "date-time",
                            "type": "string",
                          },
                          "orderId": {
                            "example": "123",
                            "type": "string",
                          },
                          "timestamp": {
                            "example": "2018-10-19T16:46:45Z",
                            "format": "date-time",
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                    },
                  },
                },
                "responses": {
                  "200": {
                    "description": "Callback successfully processed and no retries will be performed",
                  },
                },
              },
            },
          },
        },
        "description": "Add subscription for a store events",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "callbackUrl": {
                    "description": "This URL will be called by the server when the desired event will occur",
                    "example": "https://myserver.com/send/callback/here",
                    "format": "uri",
                    "type": "string",
                  },
                  "eventName": {
                    "description": "Event name for the subscription",
                    "enum": [
                      "orderInProgress",
                      "orderShipped",
                      "orderDelivered",
                    ],
                    "example": "orderInProgress",
                    "type": "string",
                  },
                },
                "required": [
                  "callbackUrl",
                  "eventName",
                ],
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "items": {
                      "type": "number",
                    },
                    "maxItems": 777,
                    "minItems": 111,
                    "type": "array",
                  },
                  "maxItems": 999,
                  "minItems": 0,
                  "type": "array",
                },
              },
            },
            "description": "Successful operation",
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subscriptionId": {
                      "example": "AAA-123-BBB-456",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
            "description": "Subscription added",
          },
        },
        "summary": "Subscribe to the Store events",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "examples": {
                  "response": {
                    "value": "<Message> OK </Message>",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "User is deleted",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be updated",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "User is updated successfully",
          },
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "security": [
    {},
  ],
  "servers": [
    {
      "description": "Default server",
      "url": "//petstore.swagger.io/v2",
    },
    {
      "description": "Sandbox server",
      "url": "//petstore.swagger.io/sandbox",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "name": "user",
    },
    {
      "description": "Everything about your Webhooks",
      "name": "webhooks",
    },
    {
      "description": "<SchemaDefinition schemaRef="#/components/schemas/Pet" />
",
      "name": "pet_model",
      "x-displayName": "The Pet Model",
    },
    {
      "description": "<SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
",
      "name": "store_model",
      "x-displayName": "The Order Model",
    },
  ],
  "webhooks": {
    "myWebhook": {
      "$ref": "#/components/pathItems/webhooks",
      "description": "Overriding description",
      "summary": "Overriding summary",
    },
    "newPet": {
      "post": {
        "description": "Information about a new pet in the systems",
        "operationId": "newPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully",
          },
        },
        "summary": "New pet",
        "tags": [
          "webhooks",
        ],
      },
    },
  },
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "pet",
        "store",
        "webhooks",
      ],
    },
    {
      "name": "User Management",
      "tags": [
        "user",
      ],
    },
    {
      "name": "Models",
      "tags": [
        "pet_model",
        "store_model",
      ],
    },
  ],
}
`;

exports[`#loadAndBundleSpec should load And Bundle Spec demo/swagger.yaml 1`] = `
{
  "components": {
    "requestBodies": {
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet",
            },
          },
        },
        "description": "Pet object that needs to be added to the store",
        "required": true,
      },
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/User",
              },
              "type": "array",
            },
          },
        },
        "description": "List of user object",
        "required": true,
      },
    },
    "schemas": {
      "ApiResponse": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer",
          },
          "message": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "Cat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "huntingSkill": {
                "default": "lazy",
                "description": "The measured skill for hunting",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive",
                ],
                "type": "string",
              },
            },
            "required": [
              "huntingSkill",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a cat",
      },
      "Category": {
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Category ID",
          },
          "name": {
            "description": "Category name",
            "minLength": 1,
            "type": "string",
          },
          "sub": {
            "description": "Test Sub Category",
            "properties": {
              "prop1": {
                "description": "Dumb Property",
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "type": "object",
        "xml": {
          "name": "Category",
        },
      },
      "Dog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "packSize": {
                "default": 1,
                "description": "The size of the pack the dog is from",
                "format": "int32",
                "minimum": 1,
                "type": "integer",
              },
            },
            "required": [
              "packSize",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a dog",
      },
      "HoneyBee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet",
          },
          {
            "properties": {
              "honeyPerDay": {
                "description": "Average amount of honey produced per day in ounces",
                "example": 3.14,
                "type": "number",
              },
            },
            "required": [
              "honeyPerDay",
            ],
            "type": "object",
          },
        ],
        "description": "A representation of a honey bee",
      },
      "Id": {
        "format": "int64",
        "type": "integer",
      },
      "Order": {
        "properties": {
          "complete": {
            "default": false,
            "description": "Indicates whenever order was completed or not",
            "type": "boolean",
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Order ID",
          },
          "petId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Pet ID",
          },
          "quantity": {
            "default": 1,
            "format": "int32",
            "minimum": 1,
            "type": "integer",
          },
          "shipDate": {
            "description": "Estimated ship date",
            "format": "date-time",
            "type": "string",
          },
          "status": {
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered",
            ],
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Order",
        },
      },
      "Pet": {
        "discriminator": {
          "propertyName": "petType",
        },
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category",
              },
            ],
            "description": "Categories this pet belongs to",
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Pet ID",
          },
          "name": {
            "description": "The name given to a pet",
            "example": "Guru",
            "type": "string",
          },
          "petType": {
            "description": "Type of a pet",
            "type": "string",
          },
          "photoUrls": Object {
            "default": Array [],
            "description": "The list of URL to a cute photos featuring pet",
            "items": {
              "format": "url",
              "type": "string",
            },
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true,
            },
          },
          "status": {
            "description": "Pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold",
            ],
            "type": "string",
          },
          "tags": {
            "description": "Tags attached to the pet",
            "items": {
              "$ref": "#/components/schemas/Tag",
            },
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true,
            },
          },
        },
        "required": [
          "name",
          "photoUrls",
        ],
        "type": "object",
        "xml": {
          "name": "Pet",
        },
      },
      "Tag": {
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Id",
              },
            ],
            "description": "Tag ID",
          },
          "name": {
            "description": "Tag name",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "Tag",
        },
      },
      "User": {
        "properties": {
          "email": {
            "description": "User email address",
            "example": "john.smith@example.com",
            "format": "email",
            "type": "string",
          },
          "firstName": {
            "description": "User first name",
            "example": "John",
            "minLength": 1,
            "type": "string",
          },
          "id": {
            "$ref": "#/components/schemas/Id",
          },
          "lastName": {
            "description": "User last name",
            "example": "Smith",
            "minLength": 1,
            "type": "string",
          },
          "password": {
            "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
            "example": "drowssaP123",
            "format": "password",
            "minLength": 8,
            "pattern": "(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])",
            "type": "string",
          },
          "phone": {
            "description": "User phone number in international format",
            "example": "+1-202-555-0192",
            "nullable": true,
            "pattern": "^\\+(?:[0-9]-?){6,14}[0-9]$",
            "type": "string",
          },
          "userStatus": {
            "description": "User status",
            "format": "int32",
            "type": "integer",
          },
          "username": {
            "description": "User supplied username",
            "example": "John78",
            "minLength": 4,
            "type": "string",
          },
        },
        "type": "object",
        "xml": {
          "name": "User",
        },
      },
    },
    "securitySchemes": {
      "api_key": {
        "description": "For this sample, you can use the api key \`special-key\` to test the authorization filters.
",
        "in": "header",
        "name": "api_key",
        "type": "apiKey",
      },
      "petstore_auth": {
        "description": "Get access to data while protecting your account credentials.
OAuth2 is also a safer and more secure way to give you access.
",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account",
            },
          },
        },
        "type": "oauth2",
      },
    },
  },
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo",
  },
  "info": {
    "contact": {
      "email": "apiteam@swagger.io",
      "url": "https://github.com/Redocly/redoc",
    },
    "description": "This is a sample server Petstore server.
You can find out more about Swagger at
[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
For this sample, you can use the api key \`special-key\` to test the authorization filters.
# Introduction
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).
# OpenAPI Specification
This API is documented in **OpenAPI format** and is based on
[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.
It was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)
tool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard
OpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/main/docs/redoc-vendor-extensions.md).
# Cross-Origin Resource Sharing
This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
And that allows cross-domain communication from the browser.
All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
# Authentication
Petstore offers two forms of authentication:
  - API Key
  - OAuth2

OAuth2 - an open protocol to allow secure authorization in a simple
and standard method from web, mobile and desktop applications.
<!-- ReDoc-Inject: <security-definitions> -->
",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
    },
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore",
    "version": "1.0.0",
    "x-logo": {
      "altText": "Petstore logo",
      "url": "https://redocly.github.io/redoc/petstore-logo.png",
    },
  },
  "openapi": "3.0.0",
  "paths": {
    "/pet": {
      "post": {
        "description": "Add new pet to the store inventory.",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Add a new pet to the store",
        "tags": [
          "pet",
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();
pet.setApiKey("your api key");
pet.petType = PetStore.v1.Pet.TYPE_DOG;
pet.name = "Rex";
// set other fields
PetStoreResponse response = pet.create();
if (response.statusCode == HttpStatusCode.Created)
{
  // Successfully created
}
else
{
  // Something wrong -- check response for errors
  Console.WriteLine(response.getRawResponse());
}
",
          },
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->create($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
      "put": {
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet",
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
          "405": {
            "description": "Validation exception",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Update an existing pet",
        "tags": [
          "pet",
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();
$form->setPetId(1);
$form->setPetType("Dog");
$form->setName("Rex");
// set other fields
try {
    $pet = $client->pets()->update($form);
} catch (UnprocessableEntityException $e) {
    var_dump($e->getErrors());
}
",
          },
        ],
      },
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "description": "Status values that need to be considered for filter",
            "explode": false,
            "in": "query",
            "name": "status",
            "required": true,
            "schema": {
              "items": {
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold",
                ],
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid status value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by status",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/findByTags": {
      "get": {
        "deprecated": true,
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "description": "Tags to filter by",
            "explode": false,
            "in": "query",
            "name": "tags",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "style": "form",
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
              "application/xml": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet",
                  },
                  "type": "array",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid tag value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Finds Pets by tags",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}": {
      "delete": {
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "example": "Bearer <TOKEN>",
            "in": "header",
            "name": "api_key",
            "required": false,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "Pet id to delete",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Deletes a pet",
        "tags": [
          "pet",
        ],
      },
      "get": {
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "description": "ID of pet to return",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Pet not found",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Find pet by ID",
        "tags": [
          "pet",
        ],
      },
      "post": {
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "description": "ID of pet that needs to be updated",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "405": {
            "description": "Invalid input",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "Updates a pet in the store with form data",
        "tags": [
          "pet",
        ],
      },
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "ID of pet to update",
            "in": "path",
            "name": "petId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer",
            },
          },
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string",
                  },
                  "file": {
                    "description": "file to upload",
                    "format": "binary",
                    "type": "string",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets",
            ],
          },
        ],
        "summary": "uploads an image",
        "tags": [
          "pet",
        ],
      },
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer",
                  },
                  "type": "object",
                },
              },
            },
            "description": "successful operation",
          },
        },
        "security": [
          {
            "api_key": [],
          },
        ],
        "summary": "Returns pet inventories by status",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order": {
      "post": {
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order",
              },
            },
          },
          "description": "order placed for purchasing the pet",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid Order",
          },
        },
        "summary": "Place an order for a pet",
        "tags": [
          "store",
        ],
      },
    },
    "/store/order/{orderId}": {
      "delete": {
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "description": "ID of the order that needs to be deleted",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Delete purchase order by ID",
        "tags": [
          "store",
        ],
      },
      "get": {
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "description": "ID of pet that needs to be fetched",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "format": "int64",
              "maximum": 5,
              "minimum": 1,
              "type": "integer",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid ID supplied",
          },
          "404": {
            "description": "Order not found",
          },
        },
        "summary": "Find purchase order by ID",
        "tags": [
          "store",
        ],
      },
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Created user object",
          "required": true,
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Create user",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithArray": {
      "post": {
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/createWithList": {
      "post": {
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray",
        },
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Creates list of users with given input array",
        "tags": [
          "user",
        ],
      },
    },
    "/user/login": {
      "get": {
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "The user name for login",
            "in": "query",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "description": "The password for login in clear text",
            "in": "query",
            "name": "password",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "application/xml": {
                "examples": {
                  "response": {
                    "value": "<message> OK </message>",
                  },
                },
                "schema": {
                  "type": "string",
                },
              },
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "OK",
                  },
                },
              },
            },
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "format": "date-time",
                  "type": "string",
                },
              },
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "format": "int32",
                  "type": "integer",
                },
              },
            },
          },
          "400": {
            "description": "Invalid username/password supplied",
          },
        },
        "summary": "Logs user into the system",
        "tags": [
          "user",
        ],
      },
    },
    "/user/logout": {
      "get": {
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
          },
        },
        "summary": "Logs out current logged in user session",
        "tags": [
          "user",
        ],
      },
    },
    "/user/{username}": {
      "delete": {
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "The name that needs to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Delete user",
        "tags": [
          "user",
        ],
      },
      "get": {
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "successful operation",
          },
          "400": {
            "description": "Invalid username supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Get user by user name",
        "tags": [
          "user",
        ],
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "name that need to be deleted",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
              },
            },
          },
          "description": "Updated user object",
          "required": true,
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
          },
          "404": {
            "description": "User not found",
          },
        },
        "summary": "Updated user",
        "tags": [
          "user",
        ],
      },
    },
  },
  "servers": [
    {
      "description": "Default server",
      "url": "//petstore.swagger.io/v2",
    },
    {
      "description": "Sandbox server",
      "url": "//petstore.swagger.io/sandbox",
    },
  ],
  "tags": [
    {
      "description": "Everything about your Pets",
      "name": "pet",
    },
    {
      "description": "Access to Petstore orders",
      "name": "store",
    },
    {
      "description": "Operations about user",
      "name": "user",
    },
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "pet",
        "store",
      ],
    },
    {
      "name": "User Management",
      "tags": [
        "user",
      ],
    },
  ],
}
`;
